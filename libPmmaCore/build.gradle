plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id 'realm-android'
    id 'com.jakewharton.butterknife'
}

import java.text.DateFormat
import java.text.SimpleDateFormat

def getDate() {
    DateFormat _df = new SimpleDateFormat("yyyyMMdd")
    return _df.format(new Date())
}

def getHost() {
    return "MNC"
}

kapt {
    correctErrorTypes = true
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        //
        defaultPublishConfig 'debug'
        publishNonDefault true

        // Keep abiFilter for the universalApk
        ndk {
            abiFilters "armeabi-v7a", 'arm64-v8a'
        }
    }

    buildTypes {
        debug {
            //
            versionNameSuffix ".DBG"

            //
            resValue "bool", "debug_mode", "true"
            buildConfigField "boolean", "LOW_PRIVACY_LOG_ENABLE", "false"

            buildConfigField 'boolean', 'ALLOW_FCM_USE', 'true'
            buildConfigField 'String', 'SHORT_FLAVOR_DESCRIPTION', '"G"'
            buildConfigField 'String', 'FLAVOR_DESCRIPTION', '"GooglePlay"'

            //
            buildConfigField 'boolean', 'USE_FILE_TRACE', 'true'

            //
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            //
            versionNameSuffix ".PRD"

            //
            resValue "bool", "debug_mode", "false"
            buildConfigField "boolean", "LOW_PRIVACY_LOG_ENABLE", "false"

            buildConfigField 'boolean', 'ALLOW_FCM_USE', 'true'
            buildConfigField 'String', 'SHORT_FLAVOR_DESCRIPTION', '"G"'
            buildConfigField 'String', 'FLAVOR_DESCRIPTION', '"GooglePlay"'

            //
            buildConfigField 'boolean', 'USE_FILE_TRACE', 'false'

            //
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

apply plugin: 'org.jetbrains.kotlin.android.extensions'

androidExtensions {
    experimental = true
}

dependencies {

    // NOTE: kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$rootProject.ext.ktxCoreVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.ext.kotlinCoroutinesCoreVersion"
    implementation "org.jetbrains.anko:anko-commons:$rootProject.ext.ankoCommonsVersion"

    // NOTE: android
    implementation "androidx.appcompat:appcompat:$rootProject.ext.appcompatVersion"
    implementation "com.google.android.material:material:$rootProject.ext.materialVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.recyclerviewVersion"
    implementation "androidx.cardview:cardview:$rootProject.ext.cardviewVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintlayoutVersion"

    // Preference, Lifecycle
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Work manager
    // (Java only)
    implementation 'android.arch.work:work-runtime:1.0.1'
    // Kotlin + coroutines
    implementation 'android.arch.work:work-runtime-ktx:1.0.1'

    // NOTE: image load
    // Use Glide library to display image (Gif supported)
    implementation "com.github.bumptech.glide:glide:$rootProject.ext.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.ext.glideVersion"

    // NOTE: network
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofitVersion"
    implementation "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.okhttpVersion"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$rootProject.ext.okhttpVersion"

    // NOTE: debug
    implementation "com.facebook.stetho:stetho:$rootProject.ext.stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$rootProject.ext.stethoVersion"
    implementation "com.squareup.okio:okio:$rootProject.ext.okioVersion"
    implementation "com.jakewharton.timber:timber:$rootProject.ext.timberVersion"

    // NOTE: test
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // NOTE: matrix
    debugImplementation project(':libMatrixCore-debug')

    // NOTE: ntius-p
    debugImplementation project(':libNtiusPush-debug')

    // NOTE: repository
    implementation project(':libRepository')
}

// publishing sdk
task export_clean(type: Delete) {
    println 'running task export_clean'

    delete 'MncMatrixSampleSDK-'+getHost()+'-'+getDate()+'/'
}

task export_save(type: Copy) {
    println 'running task export_save'

    from('build/outputs/aar')
    into('MncMatrixSampleSDK-'+getHost()+'-'+getDate()+'/')
}

task export(type: Copy) {
    println 'running task export done.'
}

// publishing task dependency
assemble.mustRunAfter clean
export_clean.mustRunAfter assemble
export_save.mustRunAfter export_clean
export.dependsOn(clean, assemble, export_clean, export_save)