// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {

    apply from: 'dependencies.gradle'

    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // Release notes of Android Gradle Plugin (AGP):
        // https://developer.android.com/studio/releases/gradle-plugin
        classpath libs.gradle.gradlePlugin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31"
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'
        classpath 'com.google.android.gms:oss-licenses-plugin:0.10.4'
        classpath "com.likethesalad.android:string-reference:1.2.2"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

// ktlint Plugin
plugins {
    id "org.jlleitschuh.gradle.ktlint" version "10.2.0"
}

allprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    repositories {
        // For olm library. This has to be declared first, to ensure that Olm library is not downloaded from another repo
        maven {
            url 'https://jitpack.io'
            content {
                // Use this repo only for olm library
                includeGroupByRegex "org\\.matrix\\.gitlab\\.matrix-org"
                // And also for FilePicker
                includeGroupByRegex "com\\.github\\.jaiselrahman"
                // And monarchy
                includeGroupByRegex "com\\.github\\.Zhuinden"
                // And ucrop
                includeGroupByRegex "com\\.github\\.yalantis"
                // JsonViewer
                includeGroupByRegex 'com\\.github\\.BillCarsonFr'
                // PhotoView
                includeGroupByRegex 'com\\.github\\.chrisbanes'
                // PFLockScreen-Android
                includeGroupByRegex 'com\\.github\\.vector-im'
                // DraggableView
                includeGroupByRegex 'com\\.github\\.hyuwah'

                // Chat effects
                includeGroupByRegex 'com\\.github\\.jetradarmobile'
                includeGroupByRegex 'nl\\.dionsegijn'

                // Voice RecordView
                includeGroupByRegex 'com\\.github\\.Armen101'
            }
        }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        // Jitsi repo
        maven {
            url "https://github.com/vector-im/jitsi_libre_maven/raw/main/android-sdk-3.1.0"
            // Note: to test Jitsi release you can use a local file like this:
            // url "file:///Users/bmarty/workspaces/jitsi_libre_maven/android-sdk-3.1.0"
        }
        google()
        mavenCentral()
        jcenter()
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        // Warnings are potential errors, so stop ignoring them
        // You can override by passing `-PallWarningsAsErrors=false` in the command line
        kotlinOptions.allWarningsAsErrors = project.getProperties().getOrDefault("allWarningsAsErrors", "true").toBoolean()
    }

    // Fix "Java heap space" issue
    tasks.withType(org.jlleitschuh.gradle.ktlint.tasks.BaseKtLintCheckTask).configureEach {
        it.workerMaxHeapSize.set("2G")
    }

    // See https://github.com/JLLeitschuh/ktlint-gradle#configuration
    ktlint {
        android = true
        ignoreFailures = false
        enableExperimentalRules = true
        // display the corresponding rule
        verbose = true
        disabledRules = [
                "spacing-between-declarations-with-comments",
                "no-multi-spaces",
                "experimental:spacing-between-declarations-with-annotations",
                "experimental:annotation"
        ]
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

